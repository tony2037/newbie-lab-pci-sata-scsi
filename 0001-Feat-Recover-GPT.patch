From 10fe666b34dfa485c98051abab9d63640ba67a21 Mon Sep 17 00:00:00 2001
From: yuchenliu <yuchenliu@synology.com>
Date: Fri, 21 Aug 2020 18:38:20 +0800
Subject: [PATCH] Feat Recover GPT

---
 block/partitions/check.h |   1 +
 block/partitions/efi.c   | 461 ++++++++++++++++++++++++++++++++++++---
 2 files changed, 427 insertions(+), 35 deletions(-)

diff --git a/block/partitions/check.h b/block/partitions/check.h
index eade17ea910b..94f9f97babfa 100644
--- a/block/partitions/check.h
+++ b/block/partitions/check.h
@@ -1,5 +1,6 @@
 #include <linux/pagemap.h>
 #include <linux/blkdev.h>
+#include <linux/bio.h>
 #include <linux/genhd.h>
 
 /*
diff --git a/block/partitions/efi.c b/block/partitions/efi.c
index 26cb624ace05..4466a0d24b51 100644
--- a/block/partitions/efi.c
+++ b/block/partitions/efi.c
@@ -101,9 +101,15 @@
 #include <linux/ctype.h>
 #include <linux/math64.h>
 #include <linux/slab.h>
+#include <linux/bio.h>
+#include <linux/blk_types.h>
 #include "check.h"
 #include "efi.h"
 
+
+#define DEBUG
+#define SECTOR_TO_PAGE_OFFSET(n) ((n & ((1 << (PAGE_SHIFT - 9)) - 1)) << 9)
+
 /* This allows a kernel command line option 'gpt' to override
  * the test for invalid PMBR.  Not __initdata because reloading
  * the partition tables happens after init too.
@@ -117,7 +123,6 @@ force_gpt_fn(char *str)
 }
 __setup("gpt", force_gpt_fn);
 
-
 /**
  * efi_crc32() - EFI version of crc32 function
  * @buf: buffer to calculate crc32 of
@@ -230,7 +235,7 @@ check_hybrid:
 	if (ret == GPT_MBR_PROTECTIVE) {
 		sz = le32_to_cpu(mbr->partition_record[part].size_in_lba);
 		if (sz != (uint32_t) total_sectors - 1 && sz != 0xFFFFFFFF)
-			pr_debug("GPT: mbr size in lba (%u) different than whole disk (%u).\n",
+			pr_warn("GPT: mbr size in lba (%u) different than whole disk (%u).\n",
 				 sz, min_t(uint32_t,
 					   total_sectors - 1, 0xFFFFFFFF));
 	}
@@ -275,6 +280,72 @@ static size_t read_lba(struct parsed_partitions *state,
 	return totalreadcount;
 }
 
+/**
+ * write_lba(): Write bytes from disk, starting at given LBA
+ * @state: disk parsed partitions
+ * @lba: the Logical Block Address of the partition table
+ * @buffer: resource buffer
+ * @count: bytes to write
+ *
+ * Description: Write @count bytes from buffer into @@state->bdev.
+ * Returns number of bytes read on success, 0 on error.
+ */
+static size_t write_lba(struct parsed_partitions *state,
+		       u64 lba, u8 *buffer, size_t count)
+{
+	size_t totalreadcount = 0;
+	struct block_device *bdev = state->bdev;
+	struct bio *bio;
+	struct page *page;
+	struct address_space *mapping = bdev->bd_inode->i_mapping;
+
+	sector_t n = lba * (bdev_logical_block_size(bdev) / 512);
+
+	if (!buffer || lba > last_lba(bdev))
+                return 0;
+
+	while (count) {
+		int copied = 512;
+		Sector sect;
+		unsigned char *data = read_part_sector(state, n, &sect);
+		if (!data)
+			break;
+		if (copied > count)
+			copied = count;
+		memcpy(data, buffer, copied);
+
+		bio = bio_alloc(GFP_NOIO, 1);
+		bio_get(bio);
+		bio->bi_bdev = bdev;
+		bio->bi_iter.bi_sector = n;
+
+		if (n >= get_capacity(state->bdev->bd_disk)) {
+			state->access_beyond_eod = true;
+			pr_warn("[ZTEX] write_lba access_beyond eod");
+			return -1;
+		}
+
+		page = read_mapping_page(mapping,
+				(pgoff_t)(n >> (PAGE_SHIFT - 9)), NULL);
+		if (PageError(page))
+			put_page(page);
+
+		//bio_add_page(bio, page, PAGE_SIZE, 0);
+                pr_warn("[ZTEX][WRITE_LBA] lba: %llu; sector: %llu; offset: %llu\n",
+                        (unsigned long long )lba, (unsigned long long)n, (unsigned long long)SECTOR_TO_PAGE_OFFSET(n));
+		bio_add_page(bio, page, copied, SECTOR_TO_PAGE_OFFSET(n));
+		submit_bio(WRITE_FLUSH_FUA, bio);
+
+		put_dev_sector(sect);
+		buffer += copied;
+		totalreadcount +=copied;
+		count -= copied;
+		n++;
+		bio_put(bio);
+	}
+	return totalreadcount;
+}
+
 /**
  * alloc_read_gpt_entries(): reads partition entries from disk
  * @state: disk parsed partitions
@@ -290,19 +361,28 @@ static gpt_entry *alloc_read_gpt_entries(struct parsed_partitions *state,
 	size_t count;
 	gpt_entry *pte;
 
-	if (!gpt)
+	if (!gpt) {
+		pr_warn("[ZTEX] in alloc_read_gpt_entries. NULL pointer\n");
 		return NULL;
+	}
 
 	count = le32_to_cpu(gpt->num_partition_entries) *
                 le32_to_cpu(gpt->sizeof_partition_entry);
-	if (!count)
+	pr_warn("[ztex] in alloc_read_gpt_entries. read %zu bytes lba from %llu\n", count, le64_to_cpu(gpt->partition_entry_lba));
+
+	if (!count) {
 		return NULL;
+		pr_warn("[ZTEX] in alloc_read_gpt_entries. count is wrong\n");
+	}
 	pte = kmalloc(count, GFP_KERNEL);
-	if (!pte)
+	if (!pte) {
 		return NULL;
+		pr_warn("[ZTEX] in alloc_read_gpt_entries. kmalloc failed\n");
+	}
 
 	if (read_lba(state, le64_to_cpu(gpt->partition_entry_lba),
 			(u8 *) pte, count) < count) {
+		pr_warn("[ZTEX] in alloc_read_gpt_entries. count is too big\n");
 		kfree(pte);
                 pte=NULL;
 		return NULL;
@@ -330,11 +410,34 @@ static gpt_header *alloc_read_gpt_header(struct parsed_partitions *state,
 		return NULL;
 
 	if (read_lba(state, lba, (u8 *) gpt, ssz) < ssz) {
+		pr_warn("[ZTEX] in alloc_read_gpt_header. read %u bytes from lba: %llu\n", ssz, lba);
 		kfree(gpt);
                 gpt=NULL;
 		return NULL;
 	}
 
+	pr_warn("[ZTEX] in alloc_read_gpt_header. success\n");
+	return gpt;
+}
+
+/**
+ * write_gpt_header(): write a gpt header into disk
+ * @state: disk parsed partitions
+ * @lba: the Logical Block Address of the partition table
+ * 
+ * Description: returns GPT header on success, NULL on error.   Write
+ * a GPT header starting at @lba to @state->bdev.
+ * Note: remember to free gpt when finished with it.
+ */
+static gpt_header *write_gpt_header(struct parsed_partitions *state, gpt_header *gpt,
+					 u64 lba)
+{
+	unsigned ssz = bdev_logical_block_size(state->bdev);
+
+	if (write_lba(state, lba, (u8 *) gpt, ssz) < ssz) {
+		return NULL;
+	}
+
 	return gpt;
 }
 
@@ -354,14 +457,22 @@ static int is_gpt_valid(struct parsed_partitions *state, u64 lba,
 	u32 crc, origcrc;
 	u64 lastlba;
 
-	if (!ptes)
+	if (lba == GPT_PRIMARY_PARTITION_TABLE_LBA)
+		pr_warn("Verify primary GPT\n");
+	else
+		pr_warn("Verify alternate GPT\n");
+
+	if (!ptes) {
 		return 0;
-	if (!(*gpt = alloc_read_gpt_header(state, lba)))
+	}
+	if (!(*gpt = alloc_read_gpt_header(state, lba))) {
+		pr_warn("GUID Partition Table Header Read fail.");
 		return 0;
+	}
 
 	/* Check the GUID Partition Table signature */
 	if (le64_to_cpu((*gpt)->signature) != GPT_HEADER_SIGNATURE) {
-		pr_debug("GUID Partition Table Header signature is wrong:"
+		pr_warn("GUID Partition Table Header signature is wrong:"
 			 "%lld != %lld\n",
 			 (unsigned long long)le64_to_cpu((*gpt)->signature),
 			 (unsigned long long)GPT_HEADER_SIGNATURE);
@@ -371,7 +482,7 @@ static int is_gpt_valid(struct parsed_partitions *state, u64 lba,
 	/* Check the GUID Partition Table header size is too big */
 	if (le32_to_cpu((*gpt)->header_size) >
 			bdev_logical_block_size(state->bdev)) {
-		pr_debug("GUID Partition Table Header size is too large: %u > %u\n",
+		pr_warn("GUID Partition Table Header size is too large: %u > %u\n",
 			le32_to_cpu((*gpt)->header_size),
 			bdev_logical_block_size(state->bdev));
 		goto fail;
@@ -379,7 +490,7 @@ static int is_gpt_valid(struct parsed_partitions *state, u64 lba,
 
 	/* Check the GUID Partition Table header size is too small */
 	if (le32_to_cpu((*gpt)->header_size) < sizeof(gpt_header)) {
-		pr_debug("GUID Partition Table Header size is too small: %u < %zu\n",
+		pr_warn("GUID Partition Table Header size is too small: %u < %zu\n",
 			le32_to_cpu((*gpt)->header_size),
 			sizeof(gpt_header));
 		goto fail;
@@ -391,7 +502,7 @@ static int is_gpt_valid(struct parsed_partitions *state, u64 lba,
 	crc = efi_crc32((const unsigned char *) (*gpt), le32_to_cpu((*gpt)->header_size));
 
 	if (crc != origcrc) {
-		pr_debug("GUID Partition Table Header CRC is wrong: %x != %x\n",
+		pr_warn("GUID Partition Table Header CRC is wrong: %x != %x\n",
 			 crc, origcrc);
 		goto fail;
 	}
@@ -400,7 +511,7 @@ static int is_gpt_valid(struct parsed_partitions *state, u64 lba,
 	/* Check that the my_lba entry points to the LBA that contains
 	 * the GUID Partition Table */
 	if (le64_to_cpu((*gpt)->my_lba) != lba) {
-		pr_debug("GPT my_lba incorrect: %lld != %lld\n",
+		pr_warn("GPT my_lba incorrect: %lld != %lld\n",
 			 (unsigned long long)le64_to_cpu((*gpt)->my_lba),
 			 (unsigned long long)lba);
 		goto fail;
@@ -411,31 +522,33 @@ static int is_gpt_valid(struct parsed_partitions *state, u64 lba,
 	 */
 	lastlba = last_lba(state->bdev);
 	if (le64_to_cpu((*gpt)->first_usable_lba) > lastlba) {
-		pr_debug("GPT: first_usable_lba incorrect: %lld > %lld\n",
+		pr_warn("GPT: first_usable_lba incorrect: %lld > %lld\n",
 			 (unsigned long long)le64_to_cpu((*gpt)->first_usable_lba),
 			 (unsigned long long)lastlba);
 		goto fail;
 	}
 	if (le64_to_cpu((*gpt)->last_usable_lba) > lastlba) {
-		pr_debug("GPT: last_usable_lba incorrect: %lld > %lld\n",
+		pr_warn("GPT: last_usable_lba incorrect: %lld > %lld\n",
 			 (unsigned long long)le64_to_cpu((*gpt)->last_usable_lba),
 			 (unsigned long long)lastlba);
 		goto fail;
 	}
 	if (le64_to_cpu((*gpt)->last_usable_lba) < le64_to_cpu((*gpt)->first_usable_lba)) {
-		pr_debug("GPT: last_usable_lba incorrect: %lld > %lld\n",
+		pr_warn("GPT: last_usable_lba incorrect: %lld > %lld\n",
 			 (unsigned long long)le64_to_cpu((*gpt)->last_usable_lba),
 			 (unsigned long long)le64_to_cpu((*gpt)->first_usable_lba));
 		goto fail;
 	}
 	/* Check that sizeof_partition_entry has the correct value */
 	if (le32_to_cpu((*gpt)->sizeof_partition_entry) != sizeof(gpt_entry)) {
-		pr_debug("GUID Partitition Entry Size check failed.\n");
+		pr_warn("GUID Partitition Entry Size check failed.\n");
 		goto fail;
 	}
 
-	if (!(*ptes = alloc_read_gpt_entries(state, *gpt)))
+	if (!(*ptes = alloc_read_gpt_entries(state, *gpt))) {
+		pr_warn("[ZTEX] GUID Partition Entry read fail.\n");
 		goto fail;
+	}
 
 	/* Check the GUID Partition Entry Array CRC */
 	crc = efi_crc32((const unsigned char *) (*ptes),
@@ -443,7 +556,7 @@ static int is_gpt_valid(struct parsed_partitions *state, u64 lba,
 			le32_to_cpu((*gpt)->sizeof_partition_entry));
 
 	if (crc != le32_to_cpu((*gpt)->partition_entry_array_crc32)) {
-		pr_debug("GUID Partitition Entry Array CRC check failed.\n");
+		pr_warn("GUID Partitition Entry Array CRC check failed.\n");
 		goto fail_ptes;
 	}
 
@@ -464,18 +577,218 @@ static int is_gpt_valid(struct parsed_partitions *state, u64 lba,
  * @pte:pte to check
  * @lastlba: last lba of the disk
  *
- * Description: returns 1 if valid,  0 on error.
+ * Description: returns 1 if valid,  0 on error because of NULL GUID type, -1 on error because of lastlba.
  */
 static inline int
-is_pte_valid(const gpt_entry *pte, const u64 lastlba)
+is_pte_valid(gpt_entry *pte, const u64 lastlba)
 {
-	if ((!efi_guidcmp(pte->partition_type_guid, NULL_GUID)) ||
-	    le64_to_cpu(pte->starting_lba) > lastlba         ||
-	    le64_to_cpu(pte->ending_lba)   > lastlba)
+	if (le64_to_cpu(pte->starting_lba) > lastlba || le64_to_cpu(pte->ending_lba) > lastlba) {
+		pr_warn("[ZTEX] pte goes wrong [last lba]: %llu [start lba]:%llu [end lba]:%llu\n", 
+			lastlba, le64_to_cpu(pte->starting_lba), le64_to_cpu(pte->ending_lba));
+                memset((void *)pte, 0, sizeof(gpt_entry));
+		return -1;
+	}
+        else if (!efi_guidcmp(pte->partition_type_guid, NULL_GUID)) {
+		pr_warn("[ZTEX] pte goes wrong: NULL GUID\n");
+                return 0;
+        }
+        else
+	    return 1;
+}
+
+/**
+ * pgpt_recover() - Try to recover primary GPT header
+ * @state: disk parsed partitions
+ * @lba: The lba the header to read
+ * @pgpt: primary GPT header ptr, filled on return.
+ * @pptes: primary PTEs ptr, filled on return.
+ * @agpt: alternate GPT header ptr, filled on return.
+ * @aptes: alternae PTEs ptr, filled on return.
+ *
+ * Description: returns 1 if valid,  0 on error.
+ * If valid, returns pointers to newly allocated GPT header and PTEs.
+ */
+static int pgpt_recover(struct parsed_partitions *state, gpt_header **pgpt, gpt_entry **pptes, gpt_header **agpt, gpt_entry **aptes, u64 lba)
+{
+	u32 crc, origcrc;
+	u64 lastlba;
+        u32 i;
+        int ret;
+        u64 current_lba;
+        u8 *first_entry;
+
+	if (!(*agpt) || !pptes || !aptes) {
+		pr_warn("[ZTEX][RECOVER] NULL pointer\n");
+		return 0;
+	}
+
+	if (!(*pgpt = alloc_read_gpt_header(state, lba))) {
+		pr_warn("[ZTEX][RECOVER] GUID Partition Table Header Read fail.\n");
 		return 0;
+	}
+
+	/* Recover the GUID Partition Table signature */
+	if (le64_to_cpu((*pgpt)->signature) != GPT_HEADER_SIGNATURE) {
+		pr_warn("[ZTEX][RECOVER]GUID Partition Table Header signature\n");
+		(*pgpt)->signature = cpu_to_le64(GPT_HEADER_SIGNATURE);
+	}
+
+	/* Recover the GUID Partition Table CRC */
+	origcrc = le32_to_cpu((*pgpt)->header_crc32);
+	(*pgpt)->header_crc32 = 0;
+	crc = efi_crc32((const unsigned char *) (*pgpt), le32_to_cpu((*pgpt)->header_size));
+
+	pr_warn("[ZTEX][RECOVER]The right GUID Partition Table Header CRC is %x, and we have %x\n", crc, origcrc);
+	if (crc != origcrc) {
+		pr_warn("[ZTEX][RECOVER]GUID Partition Table Header CRC is wrong: %x != %x\n",
+			 crc, origcrc);
+		(*pgpt)->header_crc32 = cpu_to_le32(crc);
+	}
+
+	/* Recover that the my_lba entry points to the LBA that contains
+	 * the GUID Partition Table */
+	if (le64_to_cpu((*pgpt)->my_lba) != lba) {
+		pr_warn("[ZTEX][RECOVER]GPT my_lba incorrect: %lld != %lld\n",
+			 (unsigned long long)le64_to_cpu((*pgpt)->my_lba),
+			 (unsigned long long)lba);
+		(*pgpt)->my_lba = cpu_to_le64(lba);
+	}
+
+	/* Check the first_usable_lba and last_usable_lba are
+	 * within the disk.
+	 */
+	lastlba = last_lba(state->bdev);
+	if (le64_to_cpu((*pgpt)->first_usable_lba) > lastlba) {
+		pr_warn("[ZTEX][RECOVER]GPT: first_usable_lba incorrect: %lld > %lld\n",
+			 (unsigned long long)le64_to_cpu((*pgpt)->first_usable_lba),
+			 (unsigned long long)lastlba);
+		(*pgpt)->first_usable_lba = (*agpt)->first_usable_lba;
+	}
+	if (le64_to_cpu((*pgpt)->last_usable_lba) > lastlba) {
+		pr_warn("[ZTEX][RECOVER]GPT: last_usable_lba incorrect: %lld > %lld\n",
+			 (unsigned long long)le64_to_cpu((*pgpt)->last_usable_lba),
+			 (unsigned long long)lastlba);
+		(*pgpt)->last_usable_lba = (*agpt)->last_usable_lba;
+	}
+
+	/* Recover that sizeof_partition_entry has the correct value */
+	if (le32_to_cpu((*pgpt)->sizeof_partition_entry) != sizeof(gpt_entry)) {
+		pr_warn("[ZTEX][RECOVER]GUID Partitition Entry Size check failed.\n");
+		(*pgpt)->sizeof_partition_entry = cpu_to_le32(sizeof(gpt_entry));
+	}
+
+
+	if (!(*pptes = alloc_read_gpt_entries(state, *pgpt))) {
+		pr_warn("[ZTEX][RECOVER] GUID Partition Entry read fail.\n");
+		kfree(*pgpt);
+		*pgpt = NULL;
+		return 0;
+	}
+
+	for (i = 0; i < le32_to_cpu((*pgpt)->num_partition_entries) && i < le32_to_cpu((*agpt)->num_partition_entries) && i < state->limit-1; i++) {
+            ret = is_pte_valid(&((*pptes)[i]), last_lba(state->bdev));
+            if (ret == -1) {
+                // GUID type is not NULL
+                memset(&((*aptes)[i]), 0, sizeof(gpt_entry));
+
+                current_lba = ((u64) i >> 2) + le64_to_cpu((*pgpt)->partition_entry_lba);
+                first_entry = (u8 *) &((*pptes)[i & (~(0x3))]);
+                pr_warn("[ZTEX][PTE] write recovered pte %lu back to lba %llu\n", (unsigned long)i, current_lba);
+                write_lba(state, current_lba, first_entry, bdev_logical_block_size(state->bdev));
+
+
+                current_lba = ((u64) i >> 2) + le64_to_cpu((*agpt)->partition_entry_lba);
+                first_entry = (u8 *) &((*aptes)[i & (~(0x3))]);
+                pr_warn("[ZTEX][PTE] write recovered pte %lu back to lba %llu\n", (unsigned long)i, current_lba);
+                write_lba(state, current_lba, first_entry, bdev_logical_block_size(state->bdev));
+            }
+        }
+
+	/* Recover the GUID Partition Entry Array CRC */
+	crc = efi_crc32((const unsigned char *) (*pptes),
+			le32_to_cpu((*pgpt)->num_partition_entries) *
+			le32_to_cpu((*pgpt)->sizeof_partition_entry));
+
+	pr_warn("[ZTEX][RECOVER]Primary, The right GUID Partitition Entry Array CRC: %x, and we have %x\n", 
+			crc, le32_to_cpu((*pgpt)->partition_entry_array_crc32));
+	if (crc != le32_to_cpu((*pgpt)->partition_entry_array_crc32)) {
+		pr_warn("[ZTEX][RECOVER]GUID Partitition Entry Array CRC check failed. %x != %x\n",
+				crc, le32_to_cpu((*pgpt)->partition_entry_array_crc32));
+		(*pgpt)->partition_entry_array_crc32 = cpu_to_le32(crc);
+	}
+
+	crc = efi_crc32((const unsigned char *) (*aptes),
+			le32_to_cpu((*agpt)->num_partition_entries) *
+			le32_to_cpu((*agpt)->sizeof_partition_entry));
+
+	pr_warn("[ZTEX][RECOVER]Alternate, The right GUID Partitition Entry Array CRC: %x, and we have %x\n", 
+			crc, le32_to_cpu((*agpt)->partition_entry_array_crc32));
+	if (crc != le32_to_cpu((*agpt)->partition_entry_array_crc32)) {
+		pr_warn("[ZTEX][RECOVER]GUID Partitition Entry Array CRC check failed. %x != %x\n",
+				crc, le32_to_cpu((*agpt)->partition_entry_array_crc32));
+		(*agpt)->partition_entry_array_crc32 = cpu_to_le32(crc);
+                if(write_gpt_header(state, *agpt, le64_to_cpu((*agpt)->my_lba)) == NULL) {
+                    pr_warn("[ZTEX][RECOVER]Write alternate GPT fail\n");
+                }
+	}
+
+	/* We're done, all's well */
 	return 1;
 }
 
+/**
+ * gpt_crc_corretion() - Re-calculate crc
+ * @state: disk parsed partitions
+ * @gpt: GPT header ptr, filled on return.
+ * @ptes: PTEs ptr, filled on return.
+ *
+ * Description: returns 1 if modify,  0 otherwise.
+ *
+ */
+static int gpt_crc_correction(struct parsed_partitions *state, gpt_header **gpt, gpt_entry **ptes)
+{
+	u32 crc, origcrc;
+        int ret = 0;
+
+	if (!(*gpt) || !ptes) {
+		pr_warn("[ZTEX][CRC] NULL pointer\n");
+		return 0;
+	}
+
+	/* verify the GUID Partition Table CRC */
+	origcrc = le32_to_cpu((*gpt)->header_crc32);
+	(*gpt)->header_crc32 = 0;
+	crc = efi_crc32((const unsigned char *) (*gpt), le32_to_cpu((*gpt)->header_size));
+
+	pr_warn("[ZTEX][CRC]The right GUID Partition Table Header CRC is %x, and we have %x\n", crc, origcrc);
+	if (crc != origcrc) {
+		pr_warn("[ZTEX][CRC]GUID Partition Table Header CRC is wrong: %x != %x\n",
+			 crc, origcrc);
+		(*gpt)->header_crc32 = cpu_to_le32(crc);
+                ret = 1;
+	}
+        else {
+            (*gpt)->header_crc32 = cpu_to_le32(origcrc);
+        }
+
+	/* Recover the GUID Partition Entry Array CRC */
+	crc = efi_crc32((const unsigned char *) (*ptes),
+			le32_to_cpu((*gpt)->num_partition_entries) *
+			le32_to_cpu((*gpt)->sizeof_partition_entry));
+
+	pr_warn("[ZTEX][CRC]The right GUID Partitition Entry Array CRC: %x, and we have %x\n", 
+			crc, le32_to_cpu((*gpt)->partition_entry_array_crc32));
+	if (crc != le32_to_cpu((*gpt)->partition_entry_array_crc32)) {
+		pr_warn("[ZTEX][RECOVER]GUID Partitition Entry Array CRC check failed. %x != %x\n",
+				crc, le32_to_cpu((*gpt)->partition_entry_array_crc32));
+		(*gpt)->partition_entry_array_crc32 = cpu_to_le32(crc);
+                ret = 1;
+	}
+
+	/* We're done,*/
+	return ret;
+}
+
 /**
  * compare_gpts() - Search disk for valid GPT headers and PTEs
  * @pgpt: primary GPT header
@@ -590,7 +903,7 @@ compare_gpts(gpt_header *pgpt, gpt_header *agpt, u64 lastlba)
 static int find_valid_gpt(struct parsed_partitions *state, gpt_header **gpt,
 			  gpt_entry **ptes)
 {
-	int good_pgpt = 0, good_agpt = 0, good_pmbr = 0;
+	int good_pgpt = 0, good_agpt = 0, good_pmbr = 0, ret = 0;
 	gpt_header *pgpt = NULL, *agpt = NULL;
 	gpt_entry *pptes = NULL, *aptes = NULL;
 	legacy_mbr *legacymbr;
@@ -601,6 +914,7 @@ static int find_valid_gpt(struct parsed_partitions *state, gpt_header **gpt,
 		return 0;
 
 	lastlba = last_lba(state->bdev);
+	pr_warn("[ZTEX] The last lba is: %llu\n", lastlba);
         if (!force_gpt) {
 		/* This will be added to the EFI Spec. per Intel after v1.02. */
 		legacymbr = kzalloc(sizeof(*legacymbr), GFP_KERNEL);
@@ -614,19 +928,28 @@ static int find_valid_gpt(struct parsed_partitions *state, gpt_header **gpt,
 		if (!good_pmbr)
 			goto fail;
 
-		pr_debug("Device has a %s MBR\n",
+		pr_warn("Device has a %s MBR\n",
 			 good_pmbr == GPT_MBR_PROTECTIVE ?
 						"protective" : "hybrid");
 	}
 
 	good_pgpt = is_gpt_valid(state, GPT_PRIMARY_PARTITION_TABLE_LBA,
 				 &pgpt, &pptes);
-        if (good_pgpt)
+        if (good_pgpt) {
+		pr_warn("[ZTEX] [%s] primary GPT is valid, check alternate GPT.\n", state->name);
 		good_agpt = is_gpt_valid(state,
 					 le64_to_cpu(pgpt->alternate_lba),
 					 &agpt, &aptes);
-        if (!good_agpt && force_gpt)
+		if (!good_agpt)
+			pr_warn("[ZTEX] [%s] alternate gpt is not valid through alternate lba recorded in primary gpt\n", state->name);
+		pr_warn("[ZTEX] [%s] alternate GPT is valid.", state->name);
+	}
+
+	// if (!good_agpt && force_gpt)
+        if (!good_agpt) {
                 good_agpt = is_gpt_valid(state, lastlba, &agpt, &aptes);
+		pr_warn("[ZTEX] [%s] alternate GPT is valid through last lba\n", state->name);
+	}
 
         /* The obviously unsuccessful case */
         if (!good_pgpt && !good_agpt)
@@ -640,20 +963,67 @@ static int find_valid_gpt(struct parsed_partitions *state, gpt_header **gpt,
                 *ptes = pptes;
                 kfree(agpt);
                 kfree(aptes);
-		if (!good_agpt)
-                        pr_warn("Alternate GPT is invalid, using primary GPT.\n");
+                agpt = NULL;
+                aptes = NULL;
+		if (!good_agpt) {
+                    pr_warn("[ZTEX][RECOVER]Alternate GPT is invalid, try to recover primary GPT.\n");
+                    ret = pgpt_recover(state, &agpt, &aptes, &pgpt, &pptes, lastlba);
+                    if (ret) {
+                            pr_warn("[ZTEX][RECOVER]Write recoverd GPT back to lba %llu\n", (unsigned long long)lastlba);
+                            if(write_gpt_header(state, agpt, lastlba) == NULL) {
+                                pr_warn("[ZTEX][RECOVER]Fail to recover the alternate gpt from primary gpt\n");
+                                kfree(agpt);
+                                kfree(aptes);
+                                return 1;
+                            }
+                            pr_warn("[ZTEX][RECOVER]Primary and Alternate GPT are valid.\n");
+                            return 1;
+                    }
+                    else {
+                        kfree(agpt);
+                        kfree(aptes);
+                        pr_warn("[ZTEX][RECOVER]Primary and Alternate GPT are valid.\n");
+                        return 1;
+                    }
+                }
+		pr_warn("[ZTEX] [%s] Primary and Alternate GPT are valid.\n", state->name);
                 return 1;
         }
         else if (good_agpt) {
+		/* alterative gpt is good, but primary is not, so write agpt to pgpt*/
                 *gpt  = agpt;
                 *ptes = aptes;
-                kfree(pgpt);
-                kfree(pptes);
-		pr_warn("Primary GPT is invalid, using alternate GPT.\n");
+
+		pr_warn("[ZTEX][RECOVER][%s] Try to recover from alternate GPT\n", state->name);
+
+		kfree(pgpt);
+		kfree(pptes);
+		pgpt = NULL;
+		pptes = NULL;
+		ret = pgpt_recover(state, &pgpt, &pptes, &agpt, &aptes, GPT_PRIMARY_PARTITION_TABLE_LBA);
+		if (ret) {
+		    pr_warn("[ZTEX][RECOVER]Write recoverd GPT back to lba %d\n", GPT_PRIMARY_PARTITION_TABLE_LBA);
+                    if(write_gpt_header(state, pgpt, GPT_PRIMARY_PARTITION_TABLE_LBA) == NULL) {
+                        pr_warn("Fail to recover the primary gpt from alterative gpt\n");
+                        kfree(pgpt);
+                        kfree(pptes);
+                        pr_warn("[ZTEX][RECOVER]After trying to fix primary, fail, use alternate GPT.\n");
+                        return 1;
+                    }
+                    else {
+                        *gpt = pgpt;
+                        *ptes = pptes;
+                        return 1;
+                    }
+		}
+
+		kfree(pgpt);
+		kfree(pptes);
                 return 1;
         }
 
  fail:
+	pr_warn("[ZTEX] [%s] in find_valid_gpt No good primary or alternate GPT.\n", state->name);
         kfree(pgpt);
         kfree(agpt);
         kfree(pptes);
@@ -687,15 +1057,17 @@ int efi_partition(struct parsed_partitions *state)
 	gpt_header *gpt = NULL;
 	gpt_entry *ptes = NULL;
 	u32 i;
+        int ret;
 	unsigned ssz = bdev_logical_block_size(state->bdev) / 512;
 
 	if (!find_valid_gpt(state, &gpt, &ptes) || !gpt || !ptes) {
+		pr_warn("[ZTEX]No good primary GPT or secondary gpt QQ\n");
 		kfree(gpt);
 		kfree(ptes);
 		return 0;
 	}
 
-	pr_debug("GUID Partition Table is valid!  Yea!\n");
+	pr_warn("GUID Partition Table is valid!  Yea!\n");
 
 	for (i = 0; i < le32_to_cpu(gpt->num_partition_entries) && i < state->limit-1; i++) {
 		struct partition_meta_info *info;
@@ -705,8 +1077,17 @@ int efi_partition(struct parsed_partitions *state)
 		u64 size = le64_to_cpu(ptes[i].ending_lba) -
 			   le64_to_cpu(ptes[i].starting_lba) + 1ULL;
 
-		if (!is_pte_valid(&ptes[i], last_lba(state->bdev)))
-			continue;
+                ret = is_pte_valid(&ptes[i], last_lba(state->bdev));
+                if (ret == 0) continue;
+                /*
+                if (ret == -1) {
+                    // GUID type is not NULL
+                    u64 current_lba = ((u64) i >> 2) + le64_to_cpu(gpt->partition_entry_lba);
+                    u8 *first_entry = (u8 *) &ptes[i & (~(0x3))];
+                    pr_warn("[ZTEX][PTE] write recovered pte %lu back to lba %llu\n", (unsigned long)i, current_lba);
+                    write_lba(state, current_lba, first_entry, bdev_logical_block_size(state->bdev));
+                }
+                */
 
 		put_partition(state, i+1, start * ssz, size * ssz);
 
@@ -730,6 +1111,16 @@ int efi_partition(struct parsed_partitions *state)
 		}
 		state->parts[i + 1].has_info = true;
 	}
+
+        /* Given the partition table entries could be modified, check crc again */
+        ret = gpt_crc_correction(state, &gpt, &ptes);
+        if (ret) {
+            pr_warn("[ZTEX][CRC]Write recoverd GPT back to lba %d\n", GPT_PRIMARY_PARTITION_TABLE_LBA);
+            if(write_gpt_header(state, gpt, GPT_PRIMARY_PARTITION_TABLE_LBA) == NULL) {
+                    pr_warn("Fail to recover the primary gpt from alterative gpt\n");
+            }
+        }
+
 	kfree(ptes);
 	kfree(gpt);
 	strlcat(state->pp_buf, "\n", PAGE_SIZE);
-- 
2.17.1

